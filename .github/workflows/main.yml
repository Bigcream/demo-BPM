name: DevSecOps Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  pull-requests: write  # C·∫•p quy·ªÅn ghi tr√™n pull requests
  issues: write

jobs:
  zap-scan-sec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://testphp.vulnweb.com'  # Public URL for testing
#          cmd_options: '-r report_html.html'    # Generate report

      - name: Debug ZAP Output
        run: |
          echo "Current directory: $(pwd)"
          ls -la  # Check if the file was created
          if [ -f report_html.html ]; then
            echo "File exists! Contents:"
            cat report_html.html
          else
            echo "File report_html.html not found"
          fi

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        if: always()  # Run this step even if previous steps fail
        with:
          name: zap-report  # Use a valid, descriptive name without underscores if preferred
          path: report_html.html
          retention-days: 7  # Optional: Set retention period for the artifact
#  security-checks:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0  # L·∫•y to√†n b·ªô l·ªãch s·ª≠ commit cho SonarQube
#
#      - name: Add mvnw permissions
#        run: |
#          if [ -f ./mvnw ]; then
#            chmod +x ./mvnw
#            echo "ƒê√£ c·∫•p quy·ªÅn th·ª±c thi cho mvnw"
#          else
#            echo "Kh√¥ng t√¨m th·∫•y mvnw, s·∫Ω s·ª≠ d·ª•ng mvn thay th·∫ø"
#          fi
#
#      - name: Cache Maven dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Run SonarQube Scan (SAST)
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run: |
#          java -version
#          mvn clean install -DskipTests
#          mvn sonar:sonar \
#            -Dsonar.host.url=$SONAR_HOST_URL \
#            -Dsonar.login=$SONAR_TOKEN \
#            -Dsonar.projectKey=my-spring-boot-project \
#            -Dsonar.java.binaries=target/classes \
#            -Dsonar.sources=. \
#            -Dsonar.tests=src/test \
#            -Dsonar.test.inclusions=**/*Test*.java
#
#      - name: Post SonarQube Security Issues to Pull Request
#        if: github.event_name == 'pull_request'
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          sudo apt-get update && sudo apt-get install -y jq
#          ISSUES=$(curl -u ${{ secrets.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/issues/search?componentKeys=my-spring-boot-project&resolved=false&types=VULNERABILITY" | jq -r '.issues[] | "| \(.component) | \(.line) | \(.message) |"')
#
#          if [ -n "$ISSUES" ]; then
#            COMMENT=$(echo -e "## üîí SonarQube Security Analysis Report\n\nüö® **Security Vulnerabilities Detected**\n\nThe following security issues were identified in your code:\n\n| File Path                  | Line | Issue Description                  |\n|----------------------------|------|------------------------------------|\n$ISSUES\n\nüìä **Recommendation**: Please review and resolve these issues to enhance security.\n\nüîó **View Full Report on SonarQube**: [Click Here]($SONAR_HOST_URL/dashboard?id=my-spring-boot-project)")
#            JSON_PAYLOAD=$(jq -n --arg body "$COMMENT" '{body: $body}')
#            curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
#              -H "Accept: application/vnd.github.v3+json" \
#              -d "$JSON_PAYLOAD" \
#              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
#            echo "Security vulnerabilities detected. Stopping pipeline."
#            exit 1
#          else
#            COMMENT=$(echo -e "## üîí SonarQube Security Analysis Report\n\n‚úÖ **No Security Issues Found**\n\nGreat job! No security vulnerabilities were detected in your code.\n\nüîó **View Full Report on SonarQube**: [Click Here]($SONAR_HOST_URL/dashboard?id=my-spring-boot-project)")
#            JSON_PAYLOAD=$(jq -n --arg body "$COMMENT" '{body: $body}')
#            curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
#              -H "Accept: application/vnd.github.v3+json" \
#              -d "$JSON_PAYLOAD" \
#              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
#          fi
#
#      - name: Run Dependency Security Scan (SCA)
#        id: sca
#        uses: snyk/actions/maven@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#
#  build:
#    needs: security-checks
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Cache Maven dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Build and Test
#        run: |
#          mvn clean install
#          mvn test
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and Push Docker Image
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          file: ./Dockerfile
#          push: true
#          tags: |
#            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
#            ${{ secrets.DOCKER_USERNAME }}/myapp:latest
#
#  image-scan:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Install Trivy
#        run: |
#          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
#
#      - name: Scan Docker Image
#        run: |
#          trivy image --severity HIGH,CRITICAL \
#            --exit-code 1 \
#            --no-progress \
#            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
#        continue-on-error: true
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy to Staging
#        run: echo "Deploying application..."
#
##  dast-scan:
##    needs: deploy-simulation
##    runs-on: ubuntu-latest
##    steps:
##      - name: Checkout code
##        uses: actions/checkout@v3
##
##      - name: Run OWASP ZAP DAST Scan
##        run: |
##          docker run -t owasp/zap2docker-stable zap-baseline.py \
##            -t http://localhost:8080 \
##            -r zap_report.html \
##            --autooff
##        continue-on-error: true  # Cho ph√©p pipeline ti·∫øp t·ª•c ngay c·∫£ khi ph√°t hi·ªán l·ªó h·ªïng
##
##      - name: Upload ZAP Report
##        uses: actions/upload-artifact@v3
##        with:
##          name: zap-dast-report
##          path: zap_report.html
#
#  notify-slack:
#    needs: [security-checks, build, image-scan, deploy, dast-scan]
#    runs-on: ubuntu-latest
#    if: always()
#    steps:
#      - name: Send Slack Notification
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        run: |
#          SECURITY_STATUS="${{ needs.security-checks.result }}"
#          BUILD_STATUS="${{ needs.build.result }}"
#          SCAN_STATUS="${{ needs.image-scan.result }}"
#          DEPLOY_STATUS="${{ needs.deploy.result }}"
#          DAST_STATUS="${{ needs.dast-scan.result }}"
#
#          DETAILS=""
#          if [ "$SECURITY_STATUS" == "failure" ]; then
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra b·∫£o m·∫≠t (SonarQube)*: Th·∫•t b·∫°i ‚ùå"
#          elif [ "$SECURITY_STATUS" == "skipped" ]; then
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra b·∫£o m·∫≠t (SonarQube)*: B·ªè qua ‚è©"
#          else
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra b·∫£o m·∫≠t (SonarQube)*: Th√†nh c√¥ng ‚úÖ"
#          fi
#          if [ "$BUILD_STATUS" == "failure" ]; then
#            DETAILS="$DETAILS\n- *X√¢y d·ª±ng v√† ki·ªÉm th·ª≠*: Th·∫•t b·∫°i ‚ùå"
#          elif [ "$BUILD_STATUS" == "skipped" ]; then
#            DETAILS="$DETAILS\n- *X√¢y d·ª±ng v√† ki·ªÉm th·ª≠*: B·ªè qua ‚è©"
#          else
#            DETAILS="$DETAILS\n- *X√¢y d·ª±ng v√† ki·ªÉm th·ª≠*: Th√†nh c√¥ng ‚úÖ"
#          fi
#          if [ "$SCAN_STATUS" == "failure" ]; then
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra Docker Image*: Th·∫•t b·∫°i ‚ùå"
#          elif [ "$SCAN_STATUS" == "skipped" ]; then
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra Docker Image*: B·ªè qua ‚è©"
#          else
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra Docker Image*: Th√†nh c√¥ng ‚úÖ"
#          fi
#          if [ "$DEPLOY_STATUS" == "failure" ]; then
#            DETAILS="$DETAILS\n- *Gi·∫£ l·∫≠p tri·ªÉn khai*: Th·∫•t b·∫°i ‚ùå"
#          elif [ "$DEPLOY_STATUS" == "skipped" ]; then
#            DETAILS="$DETAILS\n- *Gi·∫£ l·∫≠p tri·ªÉn khai*: B·ªè qua ‚è©"
#          else
#            DETAILS="$DETAILS\n- *Gi·∫£ l·∫≠p tri·ªÉn khai*: Th√†nh c√¥ng ‚úÖ"
#          fi
#          if [ "$DAST_STATUS" == "failure" ]; then
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra DAST (OWASP ZAP)*: Th·∫•t b·∫°i ‚ùå"
#          elif [ "$DAST_STATUS" == "skipped" ]; then
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra DAST (OWASP ZAP)*: B·ªè qua ‚è©"
#          else
#            DETAILS="$DETAILS\n- *Ki·ªÉm tra DAST (OWASP ZAP)*: Th√†nh c√¥ng ‚úÖ"
#          fi
#
#          if [ "$SECURITY_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ] && [ "$DEPLOY_STATUS" = "success" ]; then
#            STATUS="‚úÖ Pipeline Th√†nh C√¥ng! ‚úÖ"
#            COLOR="#36a64f"
#          else
#            STATUS="üö® Pipeline Th·∫•t B·∫°i! üö®"
#            COLOR="#ff0000"
#          fi
#
#          curl -X POST -H 'Content-type: application/json' --data "{
#            \"text\": \"$STATUS\",
#            \"attachments\": [{
#              \"color\": \"$COLOR\",
#              \"fields\": [
#                {\"title\": \"Chi ti·∫øt\", \"value\": \"$DETAILS\", \"short\": false},
#                {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
#                {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
#              ]
#            }]
#          }" $SLACK_WEBHOOK_URL