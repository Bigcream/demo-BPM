name: DevSecOps Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # L·∫•y to√†n b·ªô l·ªãch s·ª≠ commit cho SonarQube

      - name: Add mvnw permissions
        run: |
          if [ -f ./mvnw ]; then
            chmod +x ./mvnw
            echo "ƒê√£ c·∫•p quy·ªÅn th·ª±c thi cho mvnw"
          else
            echo "Kh√¥ng t√¨m th·∫•y mvnw, s·∫Ω s·ª≠ d·ª•ng mvn thay th·∫ø"
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run SonarQube Scan (SAST)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # V√≠ d·ª•: http://your-sonarqube-server:9000
        run: |
          # Ki·ªÉm tra phi√™n b·∫£n Java
          java -version
          # Build v√† ch·∫°y SonarQube scan
          mvn clean install -DskipTests
          mvn sonar:sonar \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.projectKey=my-spring-boot-project \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.sources=. \
            -Dsonar.tests=src/test \
            -Dsonar.test.inclusions=**/*Test*.java

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # C√†i ƒë·∫∑t jq
          sudo apt-get update && sudo apt-get install -y jq
          # Ch·ªù Quality Gate ho√†n t·∫•t
          echo "Waiting for SonarQube to process the analysis..."
          sleep 10  # C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn
          # G·ªçi API ƒë·ªÉ l·∫•y tr·∫°ng th√°i Quality Gate
          echo "Calling SonarQube API to check Quality Gate status..."
          RESPONSE=$(curl -s -w "\n%{http_code}" -u ${{ secrets.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-spring-boot-project")
          # T√°ch m√£ tr·∫°ng th√°i HTTP v√† n·ªôi dung ph·∫£n h·ªìi
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed -e '$d')
          # Ki·ªÉm tra m√£ tr·∫°ng th√°i HTTP
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: Failed to fetch Quality Gate status. HTTP Status: $HTTP_STATUS"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
          # Ki·ªÉm tra xem ph·∫£n h·ªìi c√≥ ph·∫£i JSON h·ª£p l·ªá kh√¥ng
          if ! echo "$RESPONSE_BODY" | jq . >/dev/null 2>&1; then
            echo "Error: Response is not valid JSON. Response: $RESPONSE_BODY"
            exit 1
          fi
          # L·∫•y tr·∫°ng th√°i Quality Gate
          QUALITY_GATE_STATUS=$(echo "$RESPONSE_BODY" | jq -r '.projectStatus.status')
          if [ -z "$QUALITY_GATE_STATUS" ]; then
            echo "Error: Could not extract Quality Gate status. Response: $RESPONSE_BODY"
            exit 1
          fi
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "Quality Gate failed: $QUALITY_GATE_STATUS"
            exit 1
          fi

      - name: Post SonarQube Issues to Pull Request
        if: github.event_name == 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ƒê√£ c√†i ƒë·∫∑t jq ·ªü b∆∞·ªõc tr∆∞·ªõc
          # L·∫•y danh s√°ch issues t·ª´ SonarQube
          ISSUES=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/issues/search?componentKeys=my-spring-boot-project&resolved=false&types=VULNERABILITY,BUG,CODE_SMELL" | jq -r '.issues[] | "- **\(.component):\(.line)**: \(.message)"')
          
          # N·∫øu c√≥ issues, g·ª≠i b√¨nh lu·∫≠n l√™n Pull Request
          if [ -n "$ISSUES" ]; then
            COMMENT="### SonarQube Analysis Results\nFound the following issues:\n$ISSUES\n\nüîó [View on SonarQube]($SONAR_HOST_URL/dashboard?id=my-spring-boot-project)"
            curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": \"$COMMENT\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          else
            COMMENT="### SonarQube Analysis Results\nNo issues found. Good job! ‚úÖ\n\nüîó [View on SonarQube]($SONAR_HOST_URL/dashboard?id=my-spring-boot-project)"
            curl -X POST -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": \"$COMMENT\"}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          fi

  build:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test
        run: |
          mvn clean install
          mvn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  image-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker Image
        run: |
          trivy image --severity HIGH,CRITICAL \
            --exit-code 1 \
            --no-progress \
            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

  notify-slack:
    needs: [security-checks, build, image-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # X√°c ƒë·ªãnh tr·∫°ng th√°i c·ªßa t·ª´ng job
          SECURITY_STATUS="${{ needs.security-checks.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          SCAN_STATUS="${{ needs.image-scan.result }}"

          # T·∫°o th√¥ng b√°o chi ti·∫øt
          DETAILS=""
          if [ "$SECURITY_STATUS" == "failure" ]; then
            DETAILS="$DETAILS\n- *Ki·ªÉm tra b·∫£o m·∫≠t (SonarQube)*: Th·∫•t b·∫°i ‚ùå"
          else
            DETAILS="$DETAILS\n- *Ki·ªÉm tra b·∫£o m·∫≠t (SonarQube)*: Th√†nh c√¥ng ‚úÖ"
          fi
          if [ "$BUILD_STATUS" == "failure" ]; then
            DETAILS="$DETAILS\n- *X√¢y d·ª±ng v√† ki·ªÉm th·ª≠*: Th·∫•t b·∫°i ‚ùå"
          else
            DETAILS="$DETAILS\n- *X√¢y d·ª±ng v√† ki·ªÉm th·ª≠*: Th√†nh c√¥ng ‚úÖ"
          fi
          if [ "$SCAN_STATUS" == "failure" ]; then
            DETAILS="$DETAILS\n- *Image Scan (Trivy)*: Th·∫•t b·∫°i ‚ùå"
          else
            DETAILS="$DETAILS\n- *Image Scan (Trivy)*: Th√†nh c√¥ng ‚úÖ"
          fi

          # X√°c ƒë·ªãnh tr·∫°ng th√°i t·ªïng th·ªÉ
          if [ "$SECURITY_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ] && [ "$SCAN_STATUS" = "success" ]; then
            STATUS="‚úÖ Pipeline Th√†nh C√¥ng! ‚úÖ"
            COLOR="#36a64f"
          else
            STATUS="üö® Pipeline Th·∫•t B·∫°i! üö®"
            COLOR="#ff0000"
          fi

          # G·ª≠i th√¥ng b√°o t·ªõi Slack
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"$STATUS\",
            \"attachments\": [{
              \"color\": \"$COLOR\", 
              \"fields\": [
                {\"title\": \"Chi ti·∫øt\", \"value\": \"$DETAILS\", \"short\": false},
                {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true}
              ]
            }]
          }" $SLACK_WEBHOOK_URL