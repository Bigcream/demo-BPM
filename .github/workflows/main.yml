name: DevSecOps Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # L·∫•y to√†n b·ªô l·ªãch s·ª≠ commit cho SonarQube

      - name: Add mvnw permissions
        run: |
          if [ -f ./mvnw ]; then
            chmod +x ./mvnw
            echo "ƒê√£ c·∫•p quy·ªÅn th·ª±c thi cho mvnw"
          else
            echo "Kh√¥ng t√¨m th·∫•y mvnw, s·∫Ω s·ª≠ d·ª•ng mvn thay th·∫ø"
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run SonarQube Scan (SAST)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # V√≠ d·ª•: http://your-sonarqube-server:9000
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token m·∫∑c ƒë·ªãnh c·ªßa GitHub ƒë·ªÉ g·ª≠i comment
        run: |
          # Ki·ªÉm tra phi√™n b·∫£n Java
          java -version
          # Build v√† ch·∫°y SonarQube scan v·ªõi tham s·ªë d√≤ng l·ªánh cho Pull Request
          mvn clean install -DskipTests
          mvn sonar:sonar \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.projectKey=my-spring-boot-project \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.sources=. \
            -Dsonar.tests=src/test \
            -Dsonar.test.inclusions=**/*Test*.java \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=${{ github.head_ref }} \
            -Dsonar.pullrequest.base=${{ github.base_ref }} \
            -Dsonar.pullrequest.github.repository=${{ github.repository }} \
            -Dsonar.pullrequest.provider=GitHub \
            -Dsonar.pullrequest.github.endpoint=https://api.github.com

      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Ch·ªù Quality Gate ho√†n t·∫•t v√† ki·ªÉm tra tr·∫°ng th√°i
          sleep 30  # Ch·ªù m·ªôt kho·∫£ng th·ªùi gian ƒë·ªÉ SonarQube x·ª≠ l√Ω (c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh)
          QUALITY_GATE_STATUS=$(curl -u ${{ secrets.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=my-spring-boot-project&pullRequest=${{ github.event.pull_request.number }}" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "Quality Gate failed: $QUALITY_GATE_STATUS"
            exit 1
          fi

  build:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Test
        run: |
          mvn clean install
          mvn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/myapp:latest

  image-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker Image
        run: |
          trivy image --severity HIGH,CRITICAL \
          --exit-code 1 \
          --no-progress \
          ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

  notify-slack:
    needs: [security-checks, build, image-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # X√°c ƒë·ªãnh tr·∫°ng th√°i c·ªßa t·ª´ng job
          SECURITY_STATUS="${{ needs.security-checks.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          SCAN_STATUS="${{ needs.image-scan.result }}"

          # T·∫°o th√¥ng b√°o chi ti·∫øt
          DETAILS=""
          if [ "$SECURITY_STATUS" == "failure" ]; then
            DETAILS="$DETAILS\n- *Ki·ªÉm tra b·∫£o m·∫≠t (SonarQube)*: Th·∫•t b·∫°i ‚ùå"
          fi
          if [ "$BUILD_STATUS" == "failure" ]; then
            DETAILS="$DETAILS\n- *X√¢y d·ª±ng v√† ki·ªÉm th·ª≠*: Th·∫•t b·∫°i ‚ùå"
          fi
          if [ "$SCAN_STATUS" == "failure" ]; then
            DETAILS="$DETAILS\n- *Image Scan*: Th·∫•t b·∫°i ‚ùå"
          fi

          # X√°c ƒë·ªãnh tr·∫°ng th√°i t·ªïng th·ªÉ
          if [ "$SECURITY_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ] && [ "$SCAN_STATUS" = "success" ]; then
            STATUS="‚úÖ Pipeline Th√†nh C√¥ng! ‚úÖ"
            COLOR="#36a64f"
          else
            STATUS="üö® Pipeline Th·∫•t B·∫°i! üö®"
            COLOR="#ff0000"
          fi

          # G·ª≠i th√¥ng b√°o t·ªõi Slack
          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"$STATUS\",
            \"attachments\": [{
              \"color\": \"$COLOR\", 
              \"fields\": [
                {\"title\": \"Chi ti·∫øt\", \"value\": \"$DETAILS\", \"short\": false}
              ]
            }]
          }" $SLACK_WEBHOOK_URL